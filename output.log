{"level":"warn","message":"[Warning] Config was loaded successfully."}
{"level":"warn","message":"[Warning] ShibaBot is starting..."}
{"level":"warn","message":"[Warning] Config was loaded successfully.","time":"31:11:2022 - 17:15:55"}
{"level":"warn","message":"[Warning] ShibaBot is starting...","time":"31:11:2022 - 17:15:55"}
{"level":"warn","message":"[Warning] Config was loaded successfully.","time":"1:0:2023 - 16:22:56"}
{"level":"warn","message":"[Warning] ShibaBot is starting...","time":"1:0:2023 - 16:22:56"}
{"level":"warn","message":"[Warning] Config was loaded successfully.","time":"1:0:2023 - 16:23:57"}
{"level":"warn","message":"[Warning] ShibaBot is starting...","time":"1:0:2023 - 16:23:57"}
{"level":"info","message":"[Info] Config was loaded successfully.","time":"1:0:2023 - 16:26:31"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"1:0:2023 - 16:26:31"}
{"level":"info","message":"[Info] Config was loaded successfully.","time":"01:00:2023 - 16:30:32"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"01:00:2023 - 16:30:32"}
{"level":"info","message":"[Info] Config was loaded successfully.","time":"01:Jan:2023 - 16:35:11"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"01:Jan:2023 - 16:35:11"}
{"level":"info","message":"[Info] Config was loaded successfully.","time":"01 Jan 2023 - 16:35:58"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"01 Jan 2023 - 16:35:58"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"02 Jan 2023 - 16:53:11"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"02 Jan 2023 - 16:53:11"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"02 Jan 2023 - 17:01:00"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"02 Jan 2023 - 17:01:00"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"02 Jan 2023 - 17:05:11"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"02 Jan 2023 - 17:05:11"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"02 Jan 2023 - 17:12:07"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"02 Jan 2023 - 17:12:07"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"02 Jan 2023 - 17:12:40"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"02 Jan 2023 - 17:12:40"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"02 Jan 2023 - 22:48:05"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"02 Jan 2023 - 22:48:05"}
{"level":"warn","message":"[Warning] Commands folder seems to be empty!","time":"02 Jan 2023 - 22:48:05"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"04 Jan 2023 - 17:16:06"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"04 Jan 2023 - 17:16:06"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"04 Jan 2023 - 17:16:06"}
{"level":"warn","message":"[Warning] events folder seems to be empty!","time":"04 Jan 2023 - 17:16:06"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:13:34"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:13:34"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:13:34"}
{"level":"warn","message":"[Warning] Event script'BotReady'was loaded successfully.","time":"05 Jan 2023 - 13:13:34"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:24:42"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:24:42"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:24:42"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:24:42"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:46:22"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:46:22"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:46:22"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:46:22"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:48:37"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:48:37"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:48:37"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:48:37"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:50:20"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:50:20"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:50:20"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:50:20"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:53:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:53:30"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:53:30"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:53:30"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:54:29"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:54:29"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:54:29"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:54:29"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:56:39"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:56:39"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:56:39"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:56:39"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 13:58:12"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 13:58:12"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 13:58:12"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 13:58:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:04:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:04:26"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:04:26"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 14:04:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:05:36"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:05:36"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:05:36"}
{"level":"warn","message":"[Warning] Event Loaded: BotReady","time":"05 Jan 2023 - 14:05:36"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:10:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:10:14"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:10:14"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 14:10:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:11:57"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:11:57"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:11:57"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"05 Jan 2023 - 14:11:57"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:12:51"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:12:51"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:12:51"}
{"level":"info","message":"[Info] Event script ' onReady ' was loaded successfully.","time":"05 Jan 2023 - 14:12:51"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:16:13"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:16:13"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:16:13"}
{"level":"info","message":"[Info] Event script ' onReady ' was loaded successfully.","time":"05 Jan 2023 - 14:16:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:17:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:17:21"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:17:21"}
{"level":"info","message":"[Info] Event script ' onReady ' was loaded successfully.","time":"05 Jan 2023 - 14:17:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:18:59"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:18:59"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:18:59"}
{"level":"info","message":"[Info] Event script ' onReady ' was loaded successfully.","time":"05 Jan 2023 - 14:18:59"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Jan 2023 - 14:24:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Jan 2023 - 14:24:30"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"05 Jan 2023 - 14:24:30"}
{"level":"info","message":"[Info] Event script ' onReady ' was loaded successfully.","time":"05 Jan 2023 - 14:24:30"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"06 Jan 2023 - 16:07:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"06 Jan 2023 - 16:07:17"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"06 Jan 2023 - 16:07:17"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"06 Jan 2023 - 16:07:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"06 Jan 2023 - 16:10:49"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"06 Jan 2023 - 16:10:49"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"06 Jan 2023 - 16:10:49"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"06 Jan 2023 - 16:10:49"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"06 Jan 2023 - 16:11:50"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"06 Jan 2023 - 16:11:50"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"06 Jan 2023 - 16:11:50"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"06 Jan 2023 - 16:11:50"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"06 Jan 2023 - 16:24:35"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"06 Jan 2023 - 16:24:35"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"06 Jan 2023 - 16:24:35"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"06 Jan 2023 - 16:24:35"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"08 Jan 2023 - 16:25:07"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"08 Jan 2023 - 16:25:07"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"08 Jan 2023 - 16:25:07"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"08 Jan 2023 - 16:25:07"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"08 Jan 2023 - 16:25:07"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"08 Jan 2023 - 16:41:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"08 Jan 2023 - 16:41:16"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"08 Jan 2023 - 16:41:16"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"08 Jan 2023 - 16:41:16"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"08 Jan 2023 - 16:41:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:13:10"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:13:10"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:13:10"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"09 Jan 2023 - 17:13:10"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"09 Jan 2023 - 17:13:10"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:14:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:14:30"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:14:30"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:16:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:16:25"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:16:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:17:57"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:17:57"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:17:57"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:17:57"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:17:57"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:23:35"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:23:35"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:23:35"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:23:35"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:23:35"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:32:37"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:32:37"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:32:37"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:32:37"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:32:37"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:33:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:33:18"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:33:18"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:33:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:33:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:46:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:46:21"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:46:21"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:46:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:46:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:46:39"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:46:39"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:46:39"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:46:39"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:46:39"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:46:52"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:46:52"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:46:52"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:46:52"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:46:52"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:48:40"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:48:40"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:48:40"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:48:40"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:48:40"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:49:04"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:49:04"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:49:04"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:49:04"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:49:04"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:50:35"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:50:35"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:50:35"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:50:35"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:50:35"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 17:55:22"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 17:55:22"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 17:55:22"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 17:55:22"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 17:55:22"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 18:00:19"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 18:00:19"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 18:00:19"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 18:00:19"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 18:00:19"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 18:03:45"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 18:03:45"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 18:03:45"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 18:03:45"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 18:03:45"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 18:19:26"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 18:19:26"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 18:19:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 18:19:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 18:23:37"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 18:23:37"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 18:23:37"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 18:23:37"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 18:23:37"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 18:24:01"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 18:24:01"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 18:24:01"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 18:24:01"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 18:24:01"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"09 Jan 2023 - 18:24:55"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"09 Jan 2023 - 18:24:55"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"09 Jan 2023 - 18:24:55"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"09 Jan 2023 - 18:24:55"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"09 Jan 2023 - 18:24:55"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"10 Jan 2023 - 19:43:45"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"10 Jan 2023 - 19:43:45"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"10 Jan 2023 - 19:43:45"}
{"level":"info","message":"[Info] Event script 'BotReady' was loaded successfully.","time":"10 Jan 2023 - 19:43:45"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"10 Jan 2023 - 19:43:45"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 21:53:48"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 21:53:48"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 21:53:48"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 21:53:48"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 21:53:48"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:07:10"}
{"level":"warn","message":"[Warning] Started the bot...","time":"11 Jan 2023 - 22:07:10"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:07:10"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:07:10"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:07:10"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:09:01"}
{"level":"warn","message":"[Warning] Started the bot...","time":"11 Jan 2023 - 22:09:01"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:09:01"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:09:01"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:09:01"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:09:44"}
{"level":"warn","message":"[Warning] Started the bot...","time":"11 Jan 2023 - 22:09:44"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:09:44"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:09:44"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:09:44"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:10:21"}
{"level":"warn","message":"[Warning] Started the bot...","time":"11 Jan 2023 - 22:10:21"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:10:21"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:10:21"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:10:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:37:10"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:37:10"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:37:10"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:37:10"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:37:10"}
{"level":"info","message":"info: File 'config.js' was loaded successfully."}
{"level":"info","message":"info: ShibaBot is starting..."}
{"level":"warn","message":"warn: slashCommands folder seems to be empty!"}
{"level":"info","message":"info: Event script ' BotReady ' was loaded successfully."}
{"level":"info","message":"info: Event script ' interactionCreate ' was loaded successfully."}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:41:32"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:41:32"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:41:32"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:41:32"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:41:32"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:46:39"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:46:39"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:46:39"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:46:39"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:46:39"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:51:00"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:51:00"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:51:00"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:51:00"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:51:00"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:52:43"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:52:43"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:52:43"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:52:43"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:52:43"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:54:12"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:54:12"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:54:12"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:54:12"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:54:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:56:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:56:21"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:56:21"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:56:21"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:56:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"11 Jan 2023 - 22:58:57"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"11 Jan 2023 - 22:58:57"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"11 Jan 2023 - 22:58:57"}
{"level":"info","message":"[Info] Event script ' BotReady ' was loaded successfully.","time":"11 Jan 2023 - 22:58:57"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"11 Jan 2023 - 22:58:57"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:51:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:51:23"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:51:23"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:51:23"}
{"level":"info","message":"[Info] Event script ' onBotReady ' was loaded successfully.","time":"12 Jan 2023 - 15:51:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:51:48"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:51:48"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:51:48"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:51:48"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 15:51:48"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:52:13"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:52:13"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:52:13"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:52:13"}
{"level":"info","message":"[Info] Event script ' onbotReady ' was loaded successfully.","time":"12 Jan 2023 - 15:52:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:52:32"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:52:32"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:52:32"}
{"level":"info","message":"[Info] Event script ' botReady ' was loaded successfully.","time":"12 Jan 2023 - 15:52:32"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:52:32"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:52:44"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:52:44"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:52:44"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:52:44"}
{"level":"info","message":"[Info] Event script ' onReady ' was loaded successfully.","time":"12 Jan 2023 - 15:52:44"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:52:59"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:52:59"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:52:59"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:52:59"}
{"level":"info","message":"[Info] Event script ' onready ' was loaded successfully.","time":"12 Jan 2023 - 15:52:59"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 15:59:06"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 15:59:06"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 15:59:06"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 15:59:06"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 15:59:06"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 16:17:03"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 16:17:03"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 16:17:03"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 16:17:03"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 16:17:03"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 16:18:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 16:18:26"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 16:18:26"}
{"level":"info","message":"[Info] Event script ' connected ' was loaded successfully.","time":"12 Jan 2023 - 16:18:26"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 16:18:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 16:18:41"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 16:18:41"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 16:18:41"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 16:18:41"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 16:18:41"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 16:26:04"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 16:26:04"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 16:26:04"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 16:26:04"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 16:26:04"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 16:27:59"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 16:27:59"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 16:27:59"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 16:27:59"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 16:27:59"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jan 2023 - 16:37:13"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jan 2023 - 16:37:13"}
{"level":"warn","message":"[Warning] slashCommands folder seems to be empty!","time":"12 Jan 2023 - 16:37:13"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"12 Jan 2023 - 16:37:13"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"12 Jan 2023 - 16:37:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:44:40"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:44:40"}
{"level":"info","message":"[Info] Slash Command 'ping'was loaded successfully.","time":"14 Jan 2023 - 18:44:40"}
{"level":"info","message":"[Info] Event script ' interactionCreate ' was loaded successfully.","time":"14 Jan 2023 - 18:44:40"}
{"level":"info","message":"[Info] Event script ' ready ' was loaded successfully.","time":"14 Jan 2023 - 18:44:40"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:44:40"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:49:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:49:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:49:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:49:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:49:17"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:49:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:49:40"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:49:40"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:49:40"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:49:40"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:49:40"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:49:59"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:49:59"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:49:59"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:49:59"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:49:59"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:49:59"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:50:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:50:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:50:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:50:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:50:14"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:50:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:52:49"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:52:49"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:52:49"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:52:49"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:52:49"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:54:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:54:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:54:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:54:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:54:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:55:03"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:55:03"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:55:03"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:55:03"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:55:03"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:55:03"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:55:33"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:55:33"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:55:33"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:55:33"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:55:33"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:55:33"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:57:04"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:57:04"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:57:04"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:57:04"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:57:04"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:57:04"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 18:58:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 18:58:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 18:58:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 18:58:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 18:58:17"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 18:58:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:00:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:00:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:00:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:00:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:00:26"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:00:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:01:11"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:01:11"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:01:11"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:01:11"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:01:11"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:01:11"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] Activity: undefined Type: undefined Status: undefined","time":"14 Jan 2023 - 19:02:42"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] Activity: undefined Type: undefined Status: undefined","time":"14 Jan 2023 - 19:04:43"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"14 Jan 2023 - 19:07:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"14 Jan 2023 - 19:08:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"14 Jan 2023 - 19:13:33"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] [object Object]","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"14 Jan 2023 - 19:15:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"15 Jan 2023 - 17:49:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"15 Jan 2023 - 17:57:56"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"15 Jan 2023 - 17:59:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"15 Jan 2023 - 18:00:05"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 18:00:56"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 18:00:56"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 18:00:56"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 18:00:56"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 18:00:56"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"15 Jan 2023 - 18:01:38"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"15 Jan 2023 - 18:02:10"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"15 Jan 2023 - 18:02:10"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"15 Jan 2023 - 18:02:10"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"15 Jan 2023 - 18:02:10"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"15 Jan 2023 - 18:02:10"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"15 Jan 2023 - 18:02:10"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"16 Jan 2023 - 20:29:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"16 Jan 2023 - 20:29:44"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"16 Jan 2023 - 20:30:55"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"17 Jan 2023 - 17:49:05"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m","time":"19 Jan 2023 - 18:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"19 Jan 2023 - 18:47:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID ssl.freelavalink.ga","time":"19 Jan 2023 - 18:47:55"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ssl.freelavalink.ga","time":"19 Jan 2023 - 18:54:49"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] Activity: 🐕 Shiba Testing Type: PLAYING Status: dnd","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ssl.freelavalink.ga","time":"19 Jan 2023 - 18:55:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ssl.freelavalink.ga","time":"19 Jan 2023 - 18:57:22"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ssl.freelavalink.ga","time":"05 Feb 2023 - 21:57:42"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Bot#6788","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ssl.freelavalink.ga","time":"07 Feb 2023 - 21:12:32"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ssl.freelavalink.ga","time":"08 Feb 2023 - 19:17:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"22 Feb 2023 - 11:37:29"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"22 Feb 2023 - 11:37:29"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"22 Feb 2023 - 11:37:29"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"22 Feb 2023 - 11:37:29"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"22 Feb 2023 - 11:37:29"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"22 Feb 2023 - 11:37:29"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"22 Feb 2023 - 11:43:54"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"22 Feb 2023 - 11:43:54"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"22 Feb 2023 - 11:43:54"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"22 Feb 2023 - 11:43:54"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"22 Feb 2023 - 11:43:54"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"22 Feb 2023 - 11:43:54"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: node1.kartadharta.xyz","time":"22 Feb 2023 - 11:45:08"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: node1.kartadharta.xyz","time":"22 Feb 2023 - 12:14:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"26 Feb 2023 - 13:06:03"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"26 Feb 2023 - 13:06:03"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"26 Feb 2023 - 13:06:03"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"26 Feb 2023 - 13:06:03"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"26 Feb 2023 - 13:06:03"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"26 Feb 2023 - 13:06:03"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:18"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:21"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:22"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:17"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:16"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:46:13"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:46:13"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:46:12"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:46:23"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:29"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:46:16"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:46:16"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:35"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:35"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:35"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:35"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:35"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:35"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:39"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:39"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:39"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:39"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:39"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:39"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:46:32"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:46:26"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:47:25"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:47:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:47:24"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:29"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:29"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:29"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:29"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:29"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:29"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:47:27"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:47:27"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:30"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:33"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:33"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:33"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:33"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:33"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:33"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 21:47:46"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 21:47:46"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 21:47:46"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:07:19"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:07:19"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:07:19"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ash.lavalink.alexanderof.xyz","time":"12 Jun 2023 - 22:13:14"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:13:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ash.lavalink.alexanderof.xyz","time":"12 Jun 2023 - 22:24:33"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:24:33"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: ash.lavalink.alexanderof.xyz","time":"12 Jun 2023 - 22:25:25"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:25:25"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:29:36"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:29:36"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"12 Jun 2023 - 22:30:28"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"12 Jun 2023 - 22:30:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33mPLAYING\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: 0.0.0.0","time":"12 Jun 2023 - 22:32:14"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33m3\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Reconnecting to node...","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Disconnected from node ಥ_ಥ","time":"13 Jun 2023 - 21:25:48"}
{"level":"warn","message":"[Warning] \u001b[36m[Lavalink]\u001b[39m Lavalink got an error: message(d) {\n        if (Array.isArray(d))\n            d = Buffer.concat(d);\n        else if (d instanceof ArrayBuffer)\n            d = Buffer.from(d);\n        const payload = JSON.parse(d.toString());\n        if (!payload.op)\n            return;\n        this.manager.emit(\"nodeRaw\", payload);\n        switch (payload.op) {\n            case \"stats\":\n                delete payload.op;\n                this.stats = { ...payload };\n                break;\n            case \"playerUpdate\":\n                const player = this.manager.players.get(payload.guildId);\n                if (player)\n                    player.position = payload.state.position || 0;\n                break;\n            case \"event\":\n                this.handleEvent(payload);\n                break;\n            default:\n                this.manager.emit(\"nodeError\", this, new Error(`Unexpected op \"${payload.op}\" with data: ${payload}`));\n                return;\n        }\n    }.","time":"13 Jun 2023 - 21:25:48"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33m3\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: 0.0.0.0","time":"13 Jun 2023 - 21:58:28"}
{"level":"info","message":"[Info] File 'config.js' was loaded successfully.","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] ShibaBot is starting...","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] Slash Command 'ping' was loaded successfully.","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] Event script 'interactionCreate' was loaded successfully.","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] Event script 'raw' was loaded successfully.","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] Event script 'ready' was loaded successfully.","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] Bot successfully logged as Shiba Development#6788","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] Activity: \u001b[33m🐕 Shiba Testing\u001b[39m Type: \u001b[33m3\u001b[39m Status: \u001b[33mdnd\u001b[39m","time":"13 Jun 2023 - 21:58:59"}
{"level":"info","message":"[Info] \u001b[36m[Lavalink]\u001b[39m Connected to node with ID: 0.0.0.0","time":"13 Jun 2023 - 21:58:59"}
